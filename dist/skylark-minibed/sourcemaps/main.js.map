{"version":3,"sources":["main.js"],"names":["define","skylark","CodeMirror","Utils","API","attach","[object Object]","options","this","deepExtend","Defaults","id","generateID","liveTimeout","isLive","heightSetted","resizer","loading","wrapper","container","liveButton","has","html","css","js","Object","keys","files","forEach","type","hasOwnProperty","i","length","ext","getExtension","inArray","FileTypes","build","appendChild","querySelector","bindEvents","initEditor","self","querySelectorAll","tab","addListener","e","stopPropagation","hasClass","removeClass","addClass","getAttribute","liveToggle","preventDefault","item","parentNode","curr","setAttribute","click","tabContents","removeAttribute","run","setTimeout","activeEditor","refresh","styleContent","innerHTML","htmlContent","fixHTML","value","jsContent","settings","base","Includes","styles","external","url","remove","resultFrame","CreateDOM","setAttr","el","frameTemplate","importBaseCSS","importExternalCSS","importCSS","importHTML","importJSError","importExternalJS","importJS","iframe","window","frames","document","open","write","close","mode","activeContent","fromTextArea","tabSize","lineNumbers","lineWrapping","readOnly","styleActiveLine","matchBrackets","autoCloseBrackets","autoCloseTags","theme","editorTheme","scrollbarStyle","on","getValue","clearTimeout","height","offsetHeight","scroller","scrollLock","isTouchDevice","delta","wheelDelta","originalEvent","detail","bottomOverflow","scrollTop","getBoundingClientRect","scrollHeight","topOverflow","MBResizable","toTextArea","initCodeMirror","allFiles","file","push","responseCount","Request","data","textarea","responseCheck","setInterval","clearInterval","obj","VERSION"],"mappings":"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","file":"../main.js","sourcesContent":["define([\n  \"skylark-langx/skylark\",\n  'skylark-codemirror/CodeMirror',\n  \"./utils\",\n  \"./api\",\n  'skylark-codemirror/mode/javascript/javascript',\n  'skylark-codemirror/mode/htmlmixed/htmlmixed',\n  'skylark-codemirror/mode/jsx/jsx',\n  'skylark-codemirror/mode/xml/xml',\n  'skylark-codemirror/mode/css/css',\n  'skylark-codemirror/addon/scroll/simplescrollbars',\n  'skylark-codemirror/addon/edit/matchbrackets',\n  'skylark-codemirror/addon/edit/closetag',\n  'skylark-codemirror/addon/edit/closebrackets'\n],function(skylark,CodeMirror,Utils,API){\n\n  class Minibed {\n    /**\n     * @param {object} options\n     * @return {Minibed}\n     */\n    constructor (options = {}) {\n      this.options = Utils.deepExtend({}, API.Defaults, options)\n      this.id = this.options.id || Utils.generateID('bed')\n      this.liveTimeout = -1\n      this.isLive = false\n      this.heightSetted = false\n      this.resizer = null\n\n      this.loading = null\n      this.wrapper = null\n      this.container = null\n      this.liveButton = null\n\n      this.has = {\n        html: false,\n        css: false,\n        js: false\n      }\n\n      Object.keys(this.options.files).forEach(type => {\n        if (this.options.files.hasOwnProperty(type)) {\n          for (let i = 0; i < this.options.files[type].length; i++) {\n            const ext = Utils.getExtension(this.options.files[type][i])\n            if (Utils.inArray(ext, API.FileTypes.html)) {\n              this.has.html = true\n              continue\n            }\n\n            if (Utils.inArray(ext, API.FileTypes.js)) {\n              this.has.js = true\n              continue\n            }\n\n            if (Utils.inArray(ext, API.FileTypes.css)) {\n              this.has.css = true\n            }\n          }\n        }\n      })\n\n      return this\n    }\n\n    /**\n     * @return {Minibed}\n     */\n    show () {\n      API.build(this)\n\n      this.container.appendChild(this.wrapper)\n      this.loading = this.container.querySelector('.minibed_loading')\n\n      this.bindEvents()\n      this.initEditor()\n      return this\n    }\n\n    bindEvents () {\n      const self = this\n      const tabs = this.wrapper.querySelectorAll('.minibed_tab')\n\n      tabs.forEach(tab => {\n        Utils.addListener(tab, 'click', e => {\n          Utils.stopPropagation(e)\n\n          if (!Utils.hasClass(tab, 'minibed_active')) {\n            Utils.removeClass(\n              self.wrapper.querySelector('.minibed_active'),\n              'minibed_active'\n            )\n            Utils.addClass(tab, 'minibed_active')\n          }\n\n          Utils.removeClass(\n            self.wrapper.querySelector('.minibed_active_tab'),\n            'minibed_active_tab'\n          )\n          Utils.removeClass(\n            self.wrapper.querySelector(\n              '.minibed_tab_content[data-lang=\"' +\n                tab.getAttribute('data-lang') +\n                '\"]'\n            ),\n            'minibed_selected_content'\n          )\n          Utils.addClass(\n            self.wrapper.querySelector(\n              '.minibed_tab_content[data-file=\"' +\n                tab\n                  .querySelector('.minibed_tabs_current')\n                  .getAttribute('data-current') +\n                '\"]'\n            ),\n            'minibed_active_tab minibed_selected_content'\n          )\n\n          self.initEditor()\n        })\n      })\n\n      this.liveButton = this.wrapper.querySelector('.minibed_tab_result')\n      Utils.addListener(this.liveButton, 'click', () => {\n        this.liveToggle()\n      })\n\n      Utils.addListener(this.liveButton.querySelector('label'), 'click', e => {\n        e.preventDefault()\n        return false\n      })\n\n      const dropdownItems = this.wrapper.querySelectorAll(\n        '.minibed_dropdown_item'\n      )\n\n      dropdownItems.forEach(item => {\n        Utils.addListener(item, 'click', e => {\n          Utils.stopPropagation(e)\n          if (!Utils.hasClass(item, 'minibed_selected_tab')) {\n            Utils.removeClass(\n              item.parentNode.querySelector('.minibed_selected_tab'),\n              'minibed_selected_tab'\n            )\n            Utils.addClass(item, 'minibed_selected_tab')\n            const curr = item.parentNode.parentNode.querySelector(\n              '.minibed_tabs_current'\n            )\n            curr.setAttribute('data-current', item.getAttribute('data-file'))\n            curr.click()\n          }\n        })\n      })\n    }\n\n    liveToggle () {\n      if (Utils.hasClass(this.liveButton, 'mb_live_active')) {\n        Utils.removeClass(this.liveButton, 'mb_live_active')\n        Utils.removeClass(this.tabContents, 'minibed_live')\n        this.liveButton\n          .querySelector('#minibed_checkbox-result')\n          .removeAttribute('checked')\n        this.isLive = false\n      } else {\n        Utils.addClass(this.liveButton, 'mb_live_active')\n        Utils.addClass(this.tabContents, 'minibed_live')\n        this.liveButton\n          .querySelector('#minibed_checkbox-result')\n          .setAttribute('checked', 'checked')\n        this.isLive = true\n        this.run()\n      }\n      setTimeout(\n        () => {\n          this.activeEditor.refresh()\n        },\n        10\n      )\n    }\n\n    importCSS () {\n      let styleContent = this.container.querySelector(\n        '.minibed_selected_content[data-lang=\"css\"]'\n      )\n      return styleContent\n        ? `<style type=\"text/css\">${styleContent.innerHTML}</style>`\n        : ''\n    }\n\n    importHTML () {\n      let htmlContent = this.container.querySelector(\n        '.minibed_selected_content[data-lang=\"htmlmixed\"]'\n      )\n      return htmlContent ? Utils.fixHTML(htmlContent.value) : ''\n    }\n\n    importJS () {\n      let jsContent = this.container.querySelector(\n        '.minibed_selected_content[data-lang=\"javascript\"]'\n      )\n      return jsContent\n        ? `<script type=\"text/javascript\">${jsContent.value}</script>`\n        : ''\n    }\n\n    importJSError () {\n      return `<script type=\"text/javascript\">window.onerror = function(msg, source, lineno, colno, error) {\n        console.log(msg, source, lineno, colno, error)\n        parent.document.querySelector('.minibed_bed#${this.id} .minibed_result_frame').style.borderBottomColor = '#F44336';\n      }</script>`\n    }\n\n    importBaseCSS () {\n      if (this.options.settings.css.base !== 'none') {\n        return `<link rel=\"stylesheet prefetch\" href=\"${API.Includes[this.options.settings.css.base]}\"/>`\n      }\n      return ''\n    }\n\n    importExternalCSS () {\n      let styles = ''\n\n      if (this.options.external.css.length > 0) {\n        this.options.external.css.forEach(url => {\n          styles += `<link rel=\"stylesheet prefetch\" href=\"${url}\"/>`\n        })\n      }\n      return styles\n    }\n\n    importExternalJS () {\n      let styles = ''\n\n      if (this.options.external.js.length > 0) {\n        this.options.external.js.forEach(url => {\n          styles += `<script src=\"${url}\" type=\"text/javascript\"></script>\\n\\n\\n`\n        })\n      }\n\n      return styles\n    }\n\n    run () {\n      if (this.isLive) {\n        Utils.remove(this.container.querySelector('iframe.minibed_result_frame'))\n\n        const resultFrame = new Utils.CreateDOM('iframe.minibed_result_frame')\n          .setAttr('src', 'about:blank')\n          .setAttr('name', this.id)\n        this.tabContents.appendChild(resultFrame.el)\n\n        const frameTemplate = `<!DOCTYPE html>\n          <html lang=\"en\">\n          <head>\n            <meta charset=\"UTF-8\">\n            <title>minibed <3</title>\n            ${this.importBaseCSS()}\n            ${this.importExternalCSS()}\n            ${this.importCSS()}\n          </head>\n          <body>\n            ${this.importHTML()}\n            ${this.importJSError()}\n            ${this.importExternalJS()}\n            ${this.importJS()}\n          </body>\n          </html>`\n\n        const iframe = window.frames[this.id].document\n        iframe.open()\n        iframe.write(frameTemplate)\n        iframe.close()\n      }\n    }\n\n    initCodeMirror () {\n      const self = this\n\n      let mode = this.activeContent.getAttribute('data-lang')\n\n      this.activeEditor = CodeMirror.fromTextArea(this.activeContent, {\n        mode: mode,\n        tabSize: this.options.settings.tabSize,\n        lineNumbers: this.options.settings.lineNumbers,\n        lineWrapping: this.options.settings.lineWrapping,\n        readOnly: this.options.settings.readOnly,\n        styleActiveLine: true,\n        matchBrackets: true,\n        autoCloseBrackets: true,\n        autoCloseTags: true,\n        theme: this.options.editorTheme,\n        scrollbarStyle: 'simple'\n      })\n\n      this.activeEditor.on('change', () => {\n        self.activeContent.innerHTML = self.activeEditor.getValue()\n        self.activeContent.value = self.activeEditor.getValue()\n        clearTimeout(self.liveTimeout)\n        self.liveTimeout = setTimeout(\n          () => {\n            self.run()\n          },\n          400\n        )\n      })\n\n      this.tabContents = this.wrapper.querySelector('.minibed_tab_contents')\n\n      if (!self.heightSetted) {\n        Utils.css(this.tabContents, {\n          height: this.tabContents.offsetHeight + 'px'\n        })\n      }\n\n      const scroller = this.wrapper.querySelector('.CodeMirror-scroll')\n\n      if (this.options.settings.scrollLock && !Utils.isTouchDevice()) {\n        Utils.addListener(scroller, 'mousewheel DOMMouseScroll', e => {\n          let delta = e.wheelDelta ||\n            (e.originalEvent && e.originalEvent.wheelDelta) ||\n            -e.detail\n          let bottomOverflow = scroller.scrollTop +\n            scroller.getBoundingClientRect().height -\n            scroller.scrollHeight >=\n            0\n          let topOverflow = scroller.scrollTop <= 0\n          if ((delta < 0 && bottomOverflow) || (delta > 0 && topOverflow)) {\n            e.preventDefault()\n          }\n        })\n      }\n\n      Utils.addClass(this.loading, 'hide')\n\n      this.resizer = new Utils.MBResizable(this.wrapper.querySelector('.CodeMirror'), () => {\n        self.activeEditor.refresh()\n        Utils.css(self.tabContents, {\n          height: self.wrapper.querySelector('.CodeMirror').offsetHeight + 'px'\n        })\n      })\n\n      this.run()\n    }\n\n    initEditor () {\n      const self = this\n      Utils.removeClass(this.loading, 'hide')\n\n      if (this.activeEditor) {\n        this.activeEditor.toTextArea()\n      }\n\n      this.activeContent = this.container.querySelector('.minibed_active_tab')\n\n      if (this.activeContent.getAttribute('data-loaded') === 'yes') {\n        this.initCodeMirror()\n        return\n      }\n\n      const allFiles = []\n      if (this.has.js) {\n        this.options.files.js.forEach(file => {\n          allFiles.push(file)\n        })\n      }\n      if (this.has.css) {\n        this.options.files.css.forEach(file => {\n          allFiles.push(file)\n        })\n      }\n      if (this.has.html) {\n        this.options.files.html.forEach(file => {\n          allFiles.push(file)\n        })\n      }\n\n      this.responseCount = 0\n\n      allFiles.forEach(file => {\n        Utils.Request(file, data => {\n          self.responseCount++\n          const textarea = self.wrapper.querySelector(\n            '.minibed_tab_content[data-file=\"' + file + '\"]'\n          )\n          textarea.innerHTML = data\n          textarea.setAttribute('data-loaded', 'yes')\n        })\n      })\n\n      this.responseCheck = window.setInterval(\n        () => {\n          if (self.responseCount === allFiles.length) {\n            window.clearInterval(self.responseCheck)\n            self.initCodeMirror()\n            self.liveToggle()\n          }\n        },\n        100\n      )\n    }\n\n    // API functions\n    /**\n     * @param {Object} obj\n     * @return {Minibed}\n     */\n    static overrideDefaults (obj) {\n      API.Defaults = Utils.deepExtend({}, API.Defaults, obj)\n      return this\n    }\n\n    /**\n     * @return {string}\n     */\n    static version () {\n      return VERSION\n    }\n  }\n\n  return skylark.attach(\"intg.Minibed\", Minibed);\n});"]}